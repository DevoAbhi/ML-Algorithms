# To Show The Original Image
from sklearn.datasets import load_sample_image
china=load_sample_image("flower.jpg")
ax=plt.axes(xticks=[],yticks=[])
ax.imshow(china);

# Reshaping the data
data=china/255.0 #to get the values between 0 and 1
data=data.reshape(427*640,3)
def plot_pixels(data,title,colors=None,N=10000 ):
    if(colors is None):
        colors=data
    #choose a random subset 
    rng=np.random.RandomState(0)
    i=rng.permutation(data.shape[0])[:N]
    colors=colors[i]
    R,G,B=data[i].T
    
    #Plotting the RvsB and RvsG graphs for 16 milllion colors
    fig, ax=plt.subplots(1,2,figsize=(16,6))
    ax[0].scatter(R,G,color=colors,marker='.')
    ax[0].set(xlabel="Red",ylabel="Green",xlim=(0,1),ylim=(0,1))
    
    ax[1].scatter(R,B,color=colors,marker='.')
    ax[1].set(xlabel="Red",ylabel="Blue",xlim=(0,1),ylim=(0,1))
    
    fig.suptitle(title,size=20);
    
    plot_pixels(data,title="Input color space: 16 million possible colors")

#Start of the training the model
#to fix Numpy issues
import warnings;warnings.simplefilter("ignore")

from sklearn.cluster import MiniBatchKMeans

kmeans_model=MiniBatchKMeans(16)
kmeans_model.fit(data)
new_colors=kmeans_model.cluster_centers_[kmeans_model.predict(data)]

#Plotting the RvsB and RvsG graphs for 16 colors
plot_pixels(data,title="Reduced color space: 16 colors",colors=new_colors)

#Comparing the Original and the Reduced Color Image
china_recolored=new_colors.reshape(china.shape)
fig, ax=plt.subplots(1,2,figsize=(16,6),
                    subplot_kw=dict(xticks=[],yticks=[]))
fig.subplots_adjust(wspace=0.05)
ax[0].imshow(china)
ax[0].set_title("Original Image", size=16);
ax[1].imshow(china_recolored)
ax[1].set_title("Recolored Image-16 colors", size=16);
